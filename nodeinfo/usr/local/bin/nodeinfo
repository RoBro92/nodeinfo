#!/usr/bin/env python3

import subprocess
import sys
import datetime
import os
import re
import requests

VERSION = "1.0.2"
GITHUB_REPO = "RoBro92/nodeinfo"

DEBUG_FLAG_FILE = "/tmp/nodeinfo_debug"
def is_debug_enabled():
    return os.path.exists(DEBUG_FLAG_FILE)

def debug_print(msg):
    if is_debug_enabled():
        print(f"üêû {msg}")

if "--version" in sys.argv or "-v" in sys.argv:
    print(f"nodeinfo version {VERSION}")
    sys.exit(0)


def print_version():
    print(f"nodeinfo version {VERSION}")
    sys.exit(0)


def print_help():
    print(f"""Usage: nodeinfo <vmid> [options]

Options:
  --version, -v     Show current nodeinfo version
  --vlan            Open VLAN name config file for editing
  update            Check for latest version and display download link
  --help.           Show this help message
  --debug           Enable debug mode (creates {DEBUG_FLAG_FILE} file)
  --remove          Uninstall nodeinfo and remove all files
  --yes, -y         Automatically overwrite existing notes without confirmation (still prompts for backup)
  
Examples:
  nodeinfo 101             # Inspect VM/LXC with ID 101
  nodeinfo 101 -y          # Inspect VM/LXC with ID 101 and auto-overwrite notes
  nodeinfo --vlan          # Edit VLAN name mappings
  nodeinfo update          # Check if a new version is available
  nodeinfo --version       # Show version number
""")
    sys.exit(0)


def run_cmd(cmd):
    if is_debug_enabled():
        print(f"üêû Running command: {' '.join(cmd)}")
    try:
        return subprocess.check_output(cmd, stderr=subprocess.DEVNULL).decode().strip()
    except Exception:
        return "Unavailable"


def get_vm_type(vmid):
    if run_cmd(["qm", "status", vmid]) != "Unavailable":
        vmtype = "qemu"
    elif run_cmd(["pct", "status", vmid]) != "Unavailable":
        vmtype = "lxc"
    else:
        print(f"‚ùå VM/CT ID {vmid} not found.")
        sys.exit(1)
    debug_print(f"VM type determined: {vmtype}")
    return vmtype


def get_hostname(vmid, vmtype):
    if vmtype == "lxc":
        hostname = run_cmd(["pct", "exec", vmid, "--", "hostname"])
    else:
        hostname = f"vm-{vmid}"
    debug_print(f"Hostname: {hostname}")
    return hostname


def get_os(vmid, vmtype):
    if vmtype == "lxc":
        output = run_cmd(["pct", "exec", vmid, "--", "cat", "/etc/os-release"])
        for line in output.splitlines():
            if line.startswith("PRETTY_NAME="):
                os_name = line.split("=", 1)[1].strip('"')
                debug_print(f"OS: {os_name}")
                return os_name
        os_name = "Unknown"
        debug_print(f"OS: {os_name}")
        return os_name
    os_name = "VM (OS not directly accessible)"
    debug_print(f"OS: {os_name}")
    return os_name


def get_network_info(vmid, vmtype):
    conf_path = f"/etc/pve/lxc/{vmid}.conf" if vmtype == "lxc" else f"/etc/pve/qemu-server/{vmid}.conf"
    ip = "Unknown"
    vlan = "Unknown"

    try:
        with open(conf_path, "r") as f:
            for line in f:
                if line.startswith("net0"):
                    if "ip=" in line:
                        match = re.search(r"ip=([\d\.\/]+)", line)
                        if match:
                            ip = match.group(1).split("/")[0]
                    if "tag=" in line:
                        match = re.search(r"tag=(\d+)", line)
                        if match:
                            vlan = match.group(1)
    except Exception:
        pass

    if ip == "Unknown" and vmtype == "lxc":
        try:
            ip = run_cmd(["pct", "exec", vmid, "--", "hostname", "-I"]).split()[0]
        except Exception:
            pass

    debug_print(f"IP: {ip}, VLAN: {vlan}")
    return ip, vlan


def vlan_to_name(vlan):
    config_path = "/etc/nodeinfo/vlan.conf"
    if not os.path.exists(config_path):
        return "No VLAN defined"

    try:
        with open(config_path, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#") or "=" not in line:
                    continue
                tag, name = line.split("=", 1)
                if tag.strip() == vlan:
                    return name.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è Error reading VLAN config: {e}")

    return "No VLAN defined"


def generate_ssh_info(vmid, vmtype):
    if vmtype != "lxc":
        return "- **SSH Access**: Unknown (non-LXC VM)"

    ssh_enabled = False
    ssh_port = "Unavailable"
    auth_method = "Unknown"
    root_login = "Unknown"

    try:
        output = run_cmd(["pct", "exec", vmid, "--", "pgrep", "-x", "sshd"])
        ssh_enabled = bool(output)
    except Exception:
        pass

    try:
        ssh_port_output = run_cmd(["pct", "exec", vmid, "--", "ss", "-tulpn"])
        match = re.search(r":(\d+)\s+.*sshd", ssh_port_output)
        if match:
            ssh_port = match.group(1)
    except Exception:
        pass

    if not ssh_enabled:
        return "- **SSH Access**: üî¥ Disabled"

    try:
        config = run_cmd(["pct", "exec", vmid, "--", "cat", "/etc/ssh/sshd_config"])
        password_auth = pubkey_auth = None
        for line in config.splitlines():
            line = line.strip()
            if line.startswith("Port"):
                parts = line.split()
                if len(parts) > 1:
                    ssh_port = parts[1]
            elif line.startswith("PasswordAuthentication"):
                password_auth = line.split()[1].lower()
            elif line.startswith("PubkeyAuthentication"):
                pubkey_auth = line.split()[1].lower()
            elif line.startswith("PermitRootLogin"):
                root_login = line.split()[1].lower()

        if password_auth == "yes":
            auth_method = "Password"
        elif pubkey_auth == "yes":
            auth_method = "SSH Key"
        elif password_auth == "no" and pubkey_auth == "no":
            auth_method = "Disabled"
        else:
            auth_method = "Assumed Password"

        if root_login == "no":
            root_login = "No"
        elif root_login == "yes":
            root_login = "Yes"
        else:
            root_login = "Default (Yes)"
    except Exception:
        pass

    ssh_status = "üü¢ Enabled"
    if ssh_port == "Unavailable" and auth_method == "Unknown" and root_login == "Unknown":
        ssh_status = "‚ùå Not Installed"

    return f"""- **SSH Access**: {ssh_status}
- **SSH Port**: {ssh_port}
- **Auth Method**: {auth_method}
- **Allow Root Login**: {root_login}"""


def get_os_update_info(vmid, vmtype):
    if vmtype != "lxc":
        return "OS version and update info not available for VMs"
    try:
        update_stamp = run_cmd(["pct", "exec", vmid, "--", "stat", "-c", "%y", "/var/lib/apt/periodic/update-success-stamp"])
    except Exception:
        try:
            update_stamp = run_cmd(["pct", "exec", vmid, "--", "stat", "-c", "%y", "/var/lib/apt/periodic/update-success-stamp"])
        except Exception:
            update_stamp = "Unavailable"

    try:
        upgradable = run_cmd(["pct", "exec", vmid, "--", "apt", "list", "--upgradable"])
        upgrades = upgradable.splitlines()[1:]
        if upgrades and any("upgradable" in line for line in upgrades):
            upgrade_summary = f"{len(upgrades)} packages upgradable"
        else:
            upgrade_summary = "Up to date"
    except Exception:
        upgrade_summary = "Unavailable"

    return f"""- **Last apt update**: {update_stamp}
- **Package status**: {upgrade_summary}"""

def generate_markdown(vmid, vmtype, hostname, os_name, ip, vlan, gateway, dns_servers, gateway_status, dns_status):
    markdown = f"""
üñ•Ô∏è **Container/VM Information**

- **Hostname**: {hostname}
- **Type**: {vmtype}
- **Operating System**: {os_name}
- **IP Address**: {ip}
- **Gateway**: {gateway}
- **Gateway Reachable**: {gateway_status}
- **DNS Servers**: {dns_servers}
- **DNS Resolving**: {dns_status}
- **VLAN/Subnet**: {vlan} ‚Äì {vlan_to_name(vlan)}

üîí **Access & Credentials**

- **Web UI URL**: http://{ip}
{generate_ssh_info(vmid, vmtype)}

üîÑ **Update Status**

{get_os_update_info(vmid, vmtype)}
"""


    markdown = re.sub(r'(?<!\n)üñ•Ô∏è', r'\nüñ•Ô∏è', markdown)

    return markdown
def get_network_status(vmid, vmtype):
    gateway = "Unavailable"
    dns_servers = "Unavailable"
    gateway_status = "‚ùå Unreachable"
    dns_status = "‚ùå Failed"

    if vmtype == "lxc":
        try:
            gateway = run_cmd(["pct", "exec", vmid, "--", "ip", "route", "show", "default"]).split()[2]
            gateway_status_check = run_cmd(["pct", "exec", vmid, "--", "ping", "-c", "1", "-w", "1", gateway])
            if re.search(r"1 (packets )?received", gateway_status_check, re.IGNORECASE) or "1 received" in gateway_status_check:
                gateway_status = "‚úÖ Reachable"
            if is_debug_enabled():
                print("üîç DEBUG - Gateway ping result:\n", gateway_status_check)
        except Exception:
            pass

        try:
            resolv_conf = run_cmd(["pct", "exec", vmid, "--", "cat", "/etc/resolv.conf"])
            dns_list = []
            for line in resolv_conf.splitlines():
                if line.startswith("nameserver"):
                    dns_list.append(line.split()[1])
            if dns_list:
                dns_servers = ", ".join(dns_list)
                test_dns = run_cmd(["pct", "exec", vmid, "--", "getent", "hosts", "google.com"])
                if test_dns:
                    dns_status = "‚úÖ Resolving"
        except Exception:
            pass

    debug_print(f"Gateway: {gateway}, Reachable: {gateway_status}")
    debug_print(f"DNS Servers: {dns_servers}, Resolving: {dns_status}")
    return gateway, dns_servers, gateway_status, dns_status


def update_notes(vmid, vmtype, markdown, auto_overwrite=False):
    if vmtype == "lxc":
        config_path = f"/etc/pve/lxc/{vmid}.conf"
        debug_print("Writing notes to config file...")
        try:
            with open(config_path, "r") as f:
                content = f.read()
        except Exception as e:
            debug_print(f"Failed to write notes: {e}")
            print(f"‚ùå Failed to read config file for preservation: {e}")
            return False

        lines = content.splitlines()
        comment_lines = [line for line in lines if line.strip().startswith("#")]
        if comment_lines and not auto_overwrite:
            confirm = input("‚ö†Ô∏è Commented notes already exist in this config file. Overwrite with nodeinfo block? (y/N): ").strip().lower()
            if confirm != "y":
                print("‚ùå Update cancelled.")
                return False

        cleaned_lines = [line for line in lines if not line.strip().startswith("#")] if comment_lines else lines
        new_block_lines = []
        for line in markdown.strip().splitlines():
            new_block_lines.append(f"# {line}")
        new_content = "\n".join(cleaned_lines).rstrip()
        if new_content:
            new_content += "\n"
        new_content += "\n".join(new_block_lines) + "\n"
        try:
            with open(config_path, "w") as f:
                f.write(new_content)
            debug_print("Notes successfully written.")
            if comment_lines:
                print(f"‚úÖ Notes overwritten with nodeinfo block in {config_path}")
            else:
                print(f"‚úÖ Notes written to {config_path}")
            return True
        except Exception as e:
            debug_print(f"Failed to write notes: {e}")
            print(f"‚ùå Failed to write updated notes: {e}")
            return False
    else:
        config_path = f"/etc/pve/qemu-server/{vmid}.conf"
        try:
            with open(config_path, "r") as f:
                content = f.read()
        except Exception as e:
            debug_print(f"Failed to read VM config: {e}")
            print(f"‚ùå Failed to read VM config file: {e}")
            return False

        confirm = input("‚ö†Ô∏è Do you want to back up the original VM config file before modifying? (y/N): ").strip().lower()
        if confirm == "y":
            backup_path = f"{config_path}.bak"
            try:
                with open(backup_path, "w") as backup_file:
                    backup_file.write(content)
                print(f"üíæ Backup saved to {backup_path}")
            except Exception as e:
                debug_print(f"Backup failed: {e}")
                print(f"‚ùå Failed to write backup file: {e}")
                return False

        lines = content.splitlines()
        comment_lines = [line for line in lines if line.strip().startswith("#")]
        if comment_lines and not auto_overwrite:
            confirm = input("‚ö†Ô∏è Commented notes already exist in this VM config file. Overwrite with nodeinfo block? (y/N): ").strip().lower()
            if confirm != "y":
                print("‚ùå Update cancelled.")
                return False
        cleaned_lines = [line for line in lines if not line.strip().startswith("#")] if comment_lines else lines
        new_block_lines = []
        for line in markdown.strip().splitlines():
            new_block_lines.append(f"# {line}")
        new_content = "\n".join(cleaned_lines).rstrip()
        if new_content:
            new_content += "\n"
        new_content += "\n".join(new_block_lines) + "\n"
        try:
            with open(config_path, "w") as f:
                f.write(new_content)
            debug_print("Notes successfully written to VM config file.")
            if comment_lines:
                print(f"‚úÖ Notes overwritten with nodeinfo block in {config_path}")
            else:
                print(f"‚úÖ Notes written to {config_path}")
            return True
        except Exception as e:
            debug_print(f"Failed to write notes to VM config: {e}")
            print(f"‚ùå Failed to write updated notes to VM config: {e}")
            return False

def do_self_update():

    try:
        print("üîç Checking for updates on GitHub...")
        response = requests.get(f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest")
        if response.status_code != 200:
            raise Exception("GitHub API error")
        latest = response.json().get("tag_name", "").lstrip("v")

        if latest == VERSION:
            print(f"‚úÖ You are on the latest version ({VERSION})")
            return

        print(f"üì¶ New version available: {latest} (current: {VERSION})")
        confirm = input("Do you want to download and install it now? [y/N] ").strip().lower()
        if confirm != "y":
            print("‚ùå Update cancelled.")
            return

        url = f"https://github.com/{GITHUB_REPO}/releases/latest/download/nodeinfo_v{latest}.deb"
        deb_file = f"/tmp/nodeinfo_v{latest}.deb"

        print(f"‚¨áÔ∏è  Downloading {url}...")
        with requests.get(url, stream=True) as r:
            r.raise_for_status()
            with open(deb_file, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)

        vlan_path = "/etc/nodeinfo/vlan.conf"
        backup = "/tmp/vlan.conf.bak"

        if os.path.exists(vlan_path) and os.path.getsize(vlan_path) > 0:
            print("üíæ Backing up existing VLAN config...")
            subprocess.run(["cp", vlan_path, backup])

        print("üì¶ Installing new version...")
        subprocess.run(["dpkg", "-i", deb_file])

        if os.path.exists(backup):
            print("üîÅ Restoring VLAN config...")
            subprocess.run(["cp", backup, vlan_path])
            os.remove(backup)

        print(f"‚úÖ nodeinfo updated to version {latest}")
    except Exception as e:
        print(f"‚ùå Failed to update: {e}")


def main():
    if len(sys.argv) < 2:
        print("Usage: nodeinfo <vmid> | --version | update | --vlan | --remove")
        sys.exit(1)

    if sys.argv[1] in ("--version", "-v"):
        print_version()
        return

    if sys.argv[1] in ("--help", "-h"):
        print_help()
        return

    if sys.argv[1] == "--debug":
        if is_debug_enabled():
            os.remove(DEBUG_FLAG_FILE)
            print("üõë Debug mode disabled.")
        else:
            with open(DEBUG_FLAG_FILE, "w") as f:
                f.write("debug enabled")
            print("üêû Debug mode enabled.")
        return

    if sys.argv[1] == "update":
        do_self_update()
        return

    if sys.argv[1] == "--vlan":
        editor = os.environ.get("EDITOR", "nano")
        config_path = "/etc/nodeinfo/vlan.conf"
        try:
            subprocess.run([editor, config_path])
        except Exception as e:
            print(f"‚ùå Failed to open VLAN config: {e}")
        return

    if sys.argv[1] == "--remove":
        confirm = input("‚ö†Ô∏è  This will completely uninstall nodeinfo and remove all its files. Continue? (y/n): ").lower()
        if confirm != 'y':
            print("‚ùå Removal cancelled.")
            return

        paths_to_remove = [
            "/usr/local/bin/nodeinfo",
            "/etc/nodeinfo",
            "/usr/local/share/nodeinfo"
        ]

        for path in paths_to_remove:
            if os.path.isfile(path):
                os.remove(path)
                print(f"üóëÔ∏è Removed file: {path}")
            elif os.path.isdir(path):
                import shutil
                shutil.rmtree(path)
                print(f"üóëÔ∏è Removed directory: {path}")

        print("‚úÖ nodeinfo successfully removed.")
        return

    # Argument parsing for -y/--yes flag
    auto_overwrite = False
    if "-y" in sys.argv or "--yes" in sys.argv:
        auto_overwrite = True

    vmid = sys.argv[1]
    vmtype = get_vm_type(vmid)
    hostname = get_hostname(vmid, vmtype)
    os_name = get_os(vmid, vmtype)
    ip, vlan = get_network_info(vmid, vmtype)
    gateway, dns_servers, gateway_status, dns_status = get_network_status(vmid, vmtype)

    markdown = generate_markdown(vmid, vmtype, hostname, os_name, ip, vlan, gateway, dns_servers, gateway_status, dns_status)
    updated = update_notes(vmid, vmtype, markdown, auto_overwrite=auto_overwrite)
    if updated:
        print(f"‚úÖ Notes updated for {vmtype.upper()} ID {vmid}")


if __name__ == "__main__":
    main()